# demo_setup.yml

- hosts: localhost
  vars:
    ami_id: ami-bff32ccc
  connection: local
  gather_facts: False
  user: ec2-user
  tasks:

    - name: Create new vpc with subnet
      ec2_vpc:
        state: present
        cidr_block: 172.22.0.0/16
        resource_tags: { "Environment":"Development" }
        region: eu-west-1
        subnets:
          - cidr: 172.22.1.0/24
            az: eu-west-1c
            resource_tags: { "Environment":"Dev", "Tier" : "Web" }
          - cidr: 172.22.2.0/24
            az: eu-west-1b
            resource_tags: { "Environment":"Dev", "Tier" : "App" }
          - cidr: 172.22.3.0/24
            az: eu-west-1a
            resource_tags: { "Environment":"Dev", "Tier" : "DB" }
      register: ec2_vpc_out  


    - name: ansible created group
      ec2_group:
        name: ansibleDefault
        description: an example EC2 group
        vpc_id: vpc-8bd6f8ee
        region: eu-west-1
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 10.0.0.0/8
          - proto: tcp
            from_port: 443
            to_port: 443
#            group_id: amazon-elb/sg-87654321/amazon-elb-sg
          - proto: tcp
            from_port: 3306
            to_port: 3306
 #           group_id: 123412341234/sg-87654321/exact-name-of-sg
          - proto: udp
            from_port: 10050
            to_port: 10050
            cidr_ip: 10.0.0.0/8
          - proto: udp
            from_port: 10051
            to_port: 10051
 #           group_id: sg-12345678
          - proto: icmp
            from_port: 8 # icmp type, -1 = any type
            to_port:  -1 # icmp subtype, -1 = any subtype
            cidr_ip: 10.0.0.0/8
          - proto: all
        # the containing group name may be specified here
        #         group_name: example
        #             rules_egress:
        #                   - proto: tcp
        #                           from_port: 80
        #                                   to_port: 80
        #                                           cidr_ip: 0.0.0.0/0
        #                                                   group_name: example-other
        #                                                           # description to use if example-other needs to be created
        #                                                                   group_desc: other example EC2 group
      register: ec2_group_out

    - name: Provision a set of instances
      ec2:
         key_name: id_rsa_bjss
         group: ansibleDefault
         instance_type: t2.micro
         image: "{{ ami_id }}"
         wait: true
         exact_count: 1
         count_tag:
            Name: Development
         instance_tags:
            Name: Development
         region: eu-west-1
      register: ec2_out

#    - name: Add all instance public IPs to host group
 #     add_host: hostname={{ item.public_ip }} groups=ec2hosts
  #    with_items: ec2.instances


    #- name: Create subnet for database servers
#    - ec2_vpc_subnet:
 #       state: present
  #      cidr: 172.22.0.0/16
   #     resource_tags: { "Environment":"Development" }
    #  register: webserver_subnet
    
